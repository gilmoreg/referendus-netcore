// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Microsoft.EntityFrameworkCore.ValueGeneration;
using referendus_netcore;
using System;
using System.Collections.Generic;

namespace referendusnetcore.Migrations
{
    [DbContext(typeof(PsqlContext))]
    partial class PsqlContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125");

            modelBuilder.Entity("referendus_netcore.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<string>("MiddleName");

                    b.Property<int?>("ReferenceId");

                    b.HasKey("Id");

                    b.HasIndex("ReferenceId");

                    b.ToTable("Author");
                });

            modelBuilder.Entity("referendus_netcore.Reference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Identifier");

                    b.Property<string>("Notes");

                    b.Property<List<string>>("Tags");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.Property<string>("Type")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.ToTable("References");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Reference");
                });

            modelBuilder.Entity("referendus_netcore.Article", b =>
                {
                    b.HasBaseType("referendus_netcore.Reference");

                    b.Property<string>("Issue")
                        .IsRequired();

                    b.Property<string>("Journal")
                        .IsRequired();

                    b.Property<string>("Pages")
                        .IsRequired();

                    b.Property<string>("Volume")
                        .IsRequired();

                    b.Property<int>("Year");

                    b.ToTable("Article");

                    b.HasDiscriminator().HasValue("Article");
                });

            modelBuilder.Entity("referendus_netcore.Book", b =>
                {
                    b.HasBaseType("referendus_netcore.Reference");

                    b.Property<string>("City")
                        .IsRequired();

                    b.Property<string>("Edition");

                    b.Property<string>("Pages")
                        .HasColumnName("Book_Pages");

                    b.Property<string>("Publisher")
                        .IsRequired();

                    b.Property<int>("Year")
                        .HasColumnName("Book_Year");

                    b.ToTable("Book");

                    b.HasDiscriminator().HasValue("Book");
                });

            modelBuilder.Entity("referendus_netcore.Website", b =>
                {
                    b.HasBaseType("referendus_netcore.Reference");

                    b.Property<DateTime>("AccessDate");

                    b.Property<DateTime>("PublishDate");

                    b.Property<string>("SiteTitle")
                        .IsRequired();

                    b.Property<string>("Url")
                        .IsRequired();

                    b.ToTable("Website");

                    b.HasDiscriminator().HasValue("Website");
                });

            modelBuilder.Entity("referendus_netcore.Author", b =>
                {
                    b.HasOne("referendus_netcore.Reference")
                        .WithMany("Authors")
                        .HasForeignKey("ReferenceId");
                });
#pragma warning restore 612, 618
        }
    }
}
